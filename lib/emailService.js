'use server'
import nodemailer from 'nodemailer'

// Environment variables
const SMTP_HOST = process.env.EMAIL_HOST
const SMTP_PORT = process.env.EMAIL_PORT
const SMTP_SECURE = process.env.EMAIL_SECURE
const SMTP_USER = process.env.EMAIL_USER
const SMTP_PASS = process.env.EMAIL_PASS
const SMTP_FROM = process.env.EMAIL_FROM
const SMTP_FROM_NAME = process.env.EMAIL_FROM_NAME

// Create transporter
const transporter = nodemailer.createTransport({
  host: SMTP_HOST,
  port: parseInt(SMTP_PORT) || 465,
  secure: SMTP_SECURE === 'true', // true for 465, false for other ports
  auth: {
    user: SMTP_USER,
    pass: SMTP_PASS,
  },
})

// Email templates
const generateCourseRegistrationEmail = (registrationData) => {
  const { fullName, courseName, courseDate, courseTime, zoomLink, registrationId } = registrationData

  const htmlTemplate = `
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>X√°c nh·∫≠n ƒëƒÉng k√Ω kh√≥a h·ªçc</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        .header {
            background: linear-gradient(135deg, #BCFE08, #86F969);
            color: #000;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 28px;
            font-weight: 700;
        }
        .content {
            padding: 30px;
        }
        .greeting {
            font-size: 18px;
            color: #333;
            margin-bottom: 20px;
        }
        .course-info {
            background: #f8f9fa;
            border-left: 4px solid #BCFE08;
            padding: 20px;
            margin: 20px 0;
            border-radius: 0 8px 8px 0;
        }
        .course-info h3 {
            margin-top: 0;
            color: #333;
            font-size: 20px;
        }
        .info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .info-row:last-child {
            border-bottom: none;
        }
        .info-label {
            font-weight: 600;
            color: #666;
        }
        .info-value {
            color: #333;
        }
        .zoom-button {
            display: inline-block;
            background: linear-gradient(135deg, #BCFE08, #86F969);
            color: #000;
            text-decoration: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 600;
            margin: 20px 0;
            text-align: center;
        }
        .footer {
            background: #333;
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 14px;
        }
        .footer a {
            color: #BCFE08;
            text-decoration: none;
        }
        @media (max-width: 600px) {
            .container {
                margin: 10px;
                border-radius: 4px;
            }
            .header, .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Nivex!</h1>
            <p style="margin: 5px 0 0 0; font-size: 16px;">Th√¥ng tin kh√≥a h·ªçc c·ªßa b·∫°n</p>
        </div>
        
        <div class="content">
            <div class="greeting">
                Ch√†o <strong>${fullName}</strong>,
            </div>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc t·∫°i <strong>Nivex</strong>! Ch√∫ng t√¥i r·∫•t vui khi c√≥ b·∫°n tham gia.</p>
            
            <div class="course-info">
                <h3>üìö Th√¥ng tin kh√≥a h·ªçc</h3>
                <div class="info-row">
                    <span class="info-label">T√™n kh√≥a h·ªçc:</span>
                    <span class="info-value">${courseName}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Ng√†y h·ªçc:</span>
                    <span class="info-value">${courseDate}</span>
                </div>
                ${courseTime ? `
                <div class="info-row">
                    <span class="info-label">Th·ªùi gian:</span>
                    <span class="info-value">${courseTime}</span>
                </div>
                ` : ''}
                <div class="info-row">
                    <span class="info-label">M√£ ƒëƒÉng k√Ω:</span>
                    <span class="info-value">#${registrationId}</span>
                </div>
            </div>
            
            ${zoomLink ? `
            <div style="text-align: center;">
                <a href="${zoomLink}" class="zoom-button" target="_blank">
                    üé• Tham gia Zoom Meeting
                </a>
                <p style="color: #666; font-size: 14px;">
                    <strong>L∆∞u √Ω:</strong> Vui l√≤ng tham gia ƒë√∫ng gi·ªù ƒë·ªÉ kh√¥ng b·ªè l·ª° n·ªôi dung quan tr·ªçng.
                </p>
            </div>
            ` : `
            <div style="text-align: center; padding: 20px; background: #fff3cd; border-radius: 6px; border: 1px solid #ffeeba;">
                <p style="color: #856404; margin: 0;">
                    <strong>üìû Link Zoom s·∫Ω ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc bu·ªïi h·ªçc 24 gi·ªù.</strong><br>
                    Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.
                </p>
            </div>
            `}
            
            <div style="margin-top: 30px; padding: 20px; background: #e8f4fd; border-radius: 6px; border-left: 4px solid #007bff;">
                <h4 style="margin-top: 0; color: #007bff;">üéØ Chu·∫©n b·ªã cho bu·ªïi h·ªçc:</h4>
                <ul style="margin-bottom: 0;">
                    <li>Chu·∫©n b·ªã m√°y t√≠nh/ƒëi·ªán tho·∫°i c√≥ k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh</li>
                    <li>Ki·ªÉm tra √¢m thanh v√† video tr∆∞·ªõc khi v√†o l·ªõp</li>
                    <li>Chu·∫©n b·ªã s·∫µn c√¢u h·ªèi n·∫øu c√≥</li>
                </ul>
            </div>
            
            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email n√†y ho·∫∑c hotline: <strong>1900-xxxx</strong></p>
            
            <p>Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám h·ªçc t·∫≠p tuy·ªát v·ªùi!</p>
            
            <p style="margin-top: 30px;">
                Tr√¢n tr·ªçng,<br>
                <strong>ƒê·ªôi ng≈© Nivex</strong>
            </p>
        </div>
        
        <div class="footer">
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Nivex</p>
            <p>¬© 2025 Nivex. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            <p>
                <a href="mailto:support@nivex.com">support@nivex.com</a> | 
                <a href="https://nivex.com">nivex.com</a>
            </p>
        </div>
    </div>
</body>
</html>
  `

  const textTemplate = `
K√≠nh ch√†o ${fullName},

C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc t·∫°i H·ªçc vi·ªán Nivex. Ch√∫ng t√¥i xin g·ª≠i th√¥ng tin chi ti·∫øt v·ªÅ kh√≥a h·ªçc m√† b·∫°n ƒë√£ ƒëƒÉng k√Ω.

TH√îNG TIN KH√ìA H·ªåC:
T√™n kh√≥a h·ªçc: ${courseName}
Ng√†y b·∫Øt ƒë·∫ßu: ${courseDate}
${courseTime ? `Th·ªùi gian: ${courseTime}` : ''}
M√£ s·ªë ƒëƒÉng k√Ω: ${registrationId}

${zoomLink ? `
TH√îNG TIN THAM GIA:
Link tham gia: ${zoomLink}

L∆∞u √Ω: Vui l√≤ng tham gia ƒë√∫ng th·ªùi gian ƒë·ªÉ kh√¥ng b·ªè l·ª° n·ªôi dung h·ªçc t·∫≠p quan tr·ªçng.
` : `
TH√îNG TIN LI√äN H·ªÜ:
Link tham gia l·ªõp h·ªçc s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n tr∆∞·ªõc 24 gi·ªù.
B·ªô ph·∫≠n h·ªó tr·ª£ s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.
`}

H∆Ø·ªöNG D·∫™N CHU·∫®N B·ªä:
- Chu·∫©n b·ªã thi·∫øt b·ªã m√°y t√≠nh ho·∫∑c ƒëi·ªán tho·∫°i c√≥ k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh
- Ki·ªÉm tra ch·ª©c nƒÉng √¢m thanh v√† video tr∆∞·ªõc khi tham gia
- Chu·∫©n b·ªã s·∫µn c√°c c√¢u h·ªèi ƒë·ªÉ trao ƒë·ªïi trong bu·ªïi h·ªçc

N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, xin vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email support@nivex.com ho·∫∑c s·ªë hotline 1900-xxxx

Tr√¢n tr·ªçng,
H·ªçc vi·ªán ƒê√†o t·∫°o Nivex
Website: https://nivex.com
  `

  return { html: htmlTemplate, text: textTemplate }
}

// Test email configuration
export async function testEmailConfiguration() {
  try {
    console.log('üß™ Testing email configuration...')
    
    // Check if we have required environment variables
    if (!SMTP_HOST || !SMTP_USER || !SMTP_PASS) {
      return {
        success: false,
        message: 'Missing required environment variables: ' + 
          (!SMTP_HOST ? 'EMAIL_HOST ' : '') +
          (!SMTP_USER ? 'EMAIL_USER ' : '') +
          (!SMTP_PASS ? 'EMAIL_PASS ' : '')
      }
    }
    
    // Test SMTP connection
    const isVerified = await transporter.verify()
    console.log('üìß SMTP verification result:', isVerified)
    
    return {
      success: isVerified,
      message: isVerified ? 'Email configuration is valid' : 'SMTP verification failed'
    }
  } catch (error) {
    console.error('‚ùå Email configuration test failed:', error)
    return {
      success: false,
      message: `Email configuration error: ${error.message}`
    }
  }
}

// Send test email with anti-spam optimization
export async function sendTestEmail(email) {
  try {
    const mailOptions = {
      from: `Nivex Education <${SMTP_FROM || SMTP_USER}>`,
      to: email,
      subject: 'Th√¥ng b√°o t·ª´ h·ªá th·ªëng Nivex - Ki·ªÉm tra k·∫øt n·ªëi email',
      text: `
K√≠nh ch√†o,

ƒê√¢y l√† email ki·ªÉm tra t·ª´ h·ªá th·ªëng Nivex Education.

N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, c√≥ nghƒ©a l√† h·ªá th·ªëng email ƒë√£ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.

Tr√¢n tr·ªçng,
ƒê·ªôi ng≈© k·ªπ thu·∫≠t Nivex
Website: https://nivex.com
      `,
      html: `
<!DOCTYPE html>
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
  <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
    <h2 style="color: #4CAF50;">Ki·ªÉm tra h·ªá th·ªëng email</h2>
    <p>K√≠nh ch√†o,</p>
    <p>ƒê√¢y l√† email ki·ªÉm tra t·ª´ h·ªá th·ªëng Nivex Education.</p>
    <p>N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, c√≥ nghƒ©a l√† h·ªá th·ªëng email ƒë√£ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.</p>
    <hr style="border: 1px solid #eee; margin: 20px 0;">
    <p style="font-size: 14px; color: #666;">
      Tr√¢n tr·ªçng,<br>
      ƒê·ªôi ng≈© k·ªπ thu·∫≠t Nivex<br>
      Website: <a href="https://nivex.com">nivex.com</a>
    </p>
  </div>
</body>
</html>
      `,
      replyTo: SMTP_FROM || SMTP_USER,
      headers: {
        'X-Mailer': 'Nivex Education System',
        'List-Unsubscribe': `<mailto:${SMTP_FROM || SMTP_USER}?subject=Unsubscribe>`,
      }
    }

    const info = await transporter.sendMail(mailOptions)
    console.log('‚úÖ Test email sent:', info.messageId)
    
    return { 
      success: true, 
      messageId: info.messageId,
      message: 'Test email sent successfully'
    }
    
  } catch (error) {
    console.error('‚ùå Failed to send test email:', error)
    return { 
      success: false, 
      message: 'Failed to send test email',
      error: error.message 
    }
  }
}

// Send course registration email
export async function sendCourseRegistrationEmail(email, registrationData) {
  try {
    console.log('üìß Sending course registration email to:', email)
    
    const { html, text } = generateCourseRegistrationEmail(registrationData)
    
    const mailOptions = {
      from: `${SMTP_FROM_NAME || 'Nivex Education'} <${SMTP_FROM || SMTP_USER}>`,
      to: email,
      subject: `Th√¥ng tin kh√≥a h·ªçc ${registrationData.courseName} - Nivex`,
      text,
      html,
      replyTo: SMTP_FROM || SMTP_USER,
      headers: {
        'X-Mailer': 'Nivex Education System',
        'List-Unsubscribe': `<mailto:${SMTP_FROM || SMTP_USER}?subject=Unsubscribe>`,
        'X-Auto-Response-Suppress': 'OOF, DR, RN, NRN',
      }
    }

    const info = await transporter.sendMail(mailOptions)
    console.log('‚úÖ Registration email sent successfully:', info.messageId)
    
    return { 
      success: true, 
      messageId: info.messageId,
      message: 'Email sent successfully'
    }
    
  } catch (error) {
    console.error('‚ùå Failed to send registration email:', error)
    return { 
      success: false, 
      message: 'Failed to send email',
      error: error.message 
    }
  }
}
