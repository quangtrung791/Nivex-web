'use client'
import {
  List,
  Datagrid,
  TextField,
  SelectField,
  DateField,
  EditButton,
  DeleteButton,
  ShowButton,
  Create,
  SimpleForm,
  TextInput,
  SelectInput,
  DateTimeInput,
  required,
  Edit,
  Show,
  SimpleShowLayout,
  RichTextField,
  TopToolbar,
  ExportButton,
  CreateButton,
  FilterButton,
  SearchInput,
  useRecordContext,
  ChipField,
  BooleanField,
  BooleanInput,
  ImageField,
  useDelete,
  useNotify,
  useRefresh,
  Button,
  ReferenceInput,
  ReferenceField
} from 'react-admin'
import { ImageUploadInput } from './ImageUploadInput'
import { useState } from 'react'
import RichTextInput from './RichTextInput'

// Custom Delete Button v·ªõi confirmation r√µ r√†ng
const CustomDeleteButton = () => {
  const record = useRecordContext()
  const [deleteOne, { isLoading }] = useDelete()
  const notify = useNotify()
  const refresh = useRefresh()
  
  const handleDelete = () => {
    // S·ª≠ d·ª•ng window.confirm ƒë·ªÉ ƒë·∫£m b·∫£o confirmation ho·∫°t ƒë·ªông
    const isConfirmed = window.confirm(
      `‚ö†Ô∏è X√ÅC NH·∫¨N X√ìA B√ÄI ƒêƒÇNG TIN T·ª®C\n\n` +
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i n√†y "${record?.title}" kh√¥ng?\n\n` +
      `‚ö†Ô∏è H√ÄNH ƒê·ªòNG N√ÄY KH√îNG TH·ªÇ HO√ÄN T√ÅC!`
    )
    
    if (isConfirmed) {
      deleteOne(
        'news',
        { id: record.id },
        {
          onSuccess: () => {
            notify('‚úÖ ƒê√£ x√≥a th√†nh c√¥ng', { type: 'success' })
            refresh()
          },
          onError: (error) => {
            notify(`‚ùå L·ªói khi x√≥a: ${error.message}`, { type: 'error' })
          }
        }
      )
    }
  }

  return (
    <Button
      onClick={handleDelete}
      disabled={isLoading}
      color="error"
      size="small"
      sx={{
        '&:hover': {
          backgroundColor: '#d32f2f',
          color: 'white'
        }
      }}
    >
      {isLoading ? 'ƒêang x√≥a...' : 'üóëÔ∏è X√≥a'}
    </Button>
  )
}

// Filters cho t√¨m ki·∫øm (lo·∫°i b·ªè level)
const newsFilters = [
  <SearchInput key="q" source="q" placeholder="T√¨m ki·∫øm b√†i ƒëƒÉng..." alwaysOn />,
  <SelectInput key="status" source="status" label="Tr·∫°ng th√°i" choices={[
    { id: 'active', name: 'ƒêang c√¥ng khai' },
    { id: 'draft', name: 'B·∫£n nh√°p ri√™ng t∆∞' },
    { id: 'removed', name: 'ƒê√£ x√≥a t·∫°m th·ªùi' },
  ]} />
  // ,
//   <SelectInput key="type" source="type" label="Lo·∫°i" choices={[
//     { id: 'online', name: 'Online' },
//     { id: 'offline', name: 'Offline' },
//     { id: 'hybrid', name: 'Hybrid' },
//   ]} />
]

// Custom Actions cho List
const ListActions = () => (
  <TopToolbar>
    <FilterButton />
    <CreateButton label="T·∫°o b√†i ƒëƒÉng m·ªõi" />
    <ExportButton />
  </TopToolbar>
)

// Custom Status Field v·ªõi m√†u s·∫Øc
const StatusField = () => {
  const record = useRecordContext()
  if (!record) return null
  
  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#52c41a'
      case 'draft': return '#f5222d'
      case 'removed': return '#fa8c16'
      default: return '#d9d9d9'
    }
  }
  
  const getStatusLabel = (status) => {
    switch (status) {
      case 'active': return 'ƒêang c√¥ng khai'
      case 'draft': return 'B·∫£n nh√°p ri√™ng t∆∞'
      case 'removed': return 'ƒê√£ x√≥a t·∫°m th·ªùi'
      default: return status
    }
  }
  
  return (
    <ChipField 
      source="status" 
      style={{ 
        backgroundColor: getStatusColor(record.status),
        color: 'white',
        fontWeight: 'bold'
      }}
      transform={getStatusLabel}
    />
  )
}

// List component (lo·∫°i b·ªè level, th√™m start_date/end_date, hi·ªÉn th·ªã ·∫£nh)
export const NewsList = () => (
  <List 
    filters={newsFilters}
    actions={<ListActions />}
    sort={{ field: 'created_at', order: 'DESC' }}
    perPage={25}
    title="üìö Qu·∫£n l√Ω B√†i ƒëƒÉng tin t·ª©c"
  >
    <Datagrid 
      rowClick="show"
      bulkActionButtons={false}
    >

      {/* Ch·ªçn Id danh m·ª•c tin t·ª©c */}
      <ReferenceField source="category_id" reference="category_news" label="Danh m·ª•c">
        <TextField source="name" />
      </ReferenceField>

      <TextField source="id" label="ID" />
      <ImageField source="thumbnail_url" label="·∫¢nh" sx={{ '& img': { maxWidth: '60px', maxHeight: '45px', objectFit: 'cover' } }} />
      <TextField source="title" label="Ti√™u ƒë·ªÅ b√†i ƒëƒÉng" />
      <TextField source="author" label="T√°c gi·∫£ b√†i ƒëƒÉng" />
      {/* <SelectField 
        source="type" 
        label="Lo·∫°i" 
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
      /> */}
      <DateField source="time_upload" label="Ng√†y ƒëƒÉng" showTime />
      {/* <DateField source="end_date" label="Ng√†y k·∫øt th√∫c" showTime /> */}
      <StatusField />
      <EditButton label="S·ª≠a" />
      <ShowButton label="Xem" />
      <CustomDeleteButton />
    </Datagrid>
  </List>
)

// Create component (lo·∫°i b·ªè level, th√™m DateTimeInput)
export const NewsCreate = () => (
  <Create 
    title="‚ûï T·∫°o b√†i ƒëƒÉng m·ªõi"
    redirect="list"
  >
    <SimpleForm>
      {/* Ch·ªçn danh m·ª•c tin t·ª©c */}
      <ReferenceInput source="category_id" reference="category_news" label="Danh m·ª•c">
        <SelectInput optionText="name" />
      </ReferenceInput>

      <TextInput 
        source="title" 
        label="Ti√™u ƒë·ªÅ b√†i ƒëƒÉng" 
        validate={[required()]}
        fullWidth
        helperText="Nh·∫≠p ti√™u ƒë·ªÅ c·ªßa b√†i ƒëƒÉng tin t·ª©c (b·∫Øt bu·ªôc)"
      required />
      
      {/* <SelectInput 
        source="type" 
        label="Lo·∫°i kh√≥a h·ªçc"
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
        defaultValue="online"
        validate={[required()]}
      disabled /> */}
      
      <SelectInput 
        source="status" 
        label="Tr·∫°ng th√°i"
        choices={[
          { id: 'active', name: 'C√¥ng khai' },
          { id: 'draft', name: 'B·∫£n nh√°p ri√™ng t∆∞' },
        //   { id: 'removed', name: 'S·∫Øp ra m·∫Øt' },
        ]}
        defaultValue="active"
        validate={[required()]}
      />
      
      <DateTimeInput 
        source="time_upload" 
        label="Th·ªùi gian ƒëƒÉng t·∫£i"
      required/>
      
      {/* <DateTimeInput 
        source="end_date" 
        label="Ng√†y gi·ªù k·∫øt th√∫c"
      required/> */}
      
      {/* <TextInput 
        source="link_zoom" 
        label="Link Zoom"
        fullWidth
        placeholder="https://zoom.us/j/123456789"
      required /> */}
      
      <ImageUploadInput 
        source="thumbnail_url" 
        label="H√¨nh ·∫£nh thumbnail qu·∫£ng b√° b√†i ƒëƒÉng (N√™n l√† t·ªâ l·ªá 16:9)"
        helperText="T·∫£i l√™n ho·∫∑c ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB. ƒê·ªãnh d·∫°ng: JPG, PNG, GIF, WebP"
      />
      
      <RichTextInput 
        source="content" 
        label="N·ªôi dung b√†i ƒëƒÉng"
        multiline
        rows={15}
        fullWidth
        helperText="N·ªôi dung b√†i ƒëƒÉng"
      />
      <TextField source="author" label="T√°c gi·∫£ b√†i ƒëƒÉng" />
    </SimpleForm>
  </Create>
)

// Edit component (lo·∫°i b·ªè level, th√™m DateTimeInput)
export const NewsEdit = () => (
  <Edit 
    title="‚úèÔ∏è Ch·ªânh s·ª≠a b√†i ƒëƒÉng"
  >
    <SimpleForm>
      {/* Ch·ªçn id danh m·ª•c */}
      <ReferenceInput source="category_id" reference="category_news" label="Danh m·ª•c">
        <SelectInput optionText="name" />
      </ReferenceInput>

      <TextInput source="id" label="ID" disabled />
      
      <TextInput 
        source="title" 
        label="Ti√™u ƒë·ªÅ b√†i ƒëƒÉng" 
        validate={[required()]}
        fullWidth
      required />
      
      {/* <SelectInput 
        source="type" 
        label="Lo·∫°i kh√≥a h·ªçc"
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
        validate={[required()]}
      disabled /> */}
      
      <SelectInput 
        source="status" 
        label="Tr·∫°ng th√°i"
        choices={[
          { id: 'active', name: 'ƒêƒÉng c√¥ng khai' },
          { id: 'draft', name: 'B·∫£n nh√°p ri√™ng t∆∞' },
        //   { id: 'removed', name: 'S·∫Øp ra m·∫Øt' },
        ]}
        validate={[required()]}
      />
      
      <DateTimeInput 
        source="time_upload" 
        label="Th·ªùi gian ƒëƒÉng t·∫£i"
      required />
      
      {/* <DateTimeInput 
        source="end_date" 
        label="Ng√†y gi·ªù k·∫øt th√∫c"
      required /> */}
      
      {/* <TextInput 
        source="link_zoom" 
        label="Link Zoom"
        fullWidth
        placeholder="https://zoom.us/j/123456789"
      required/> */}
      
      <ImageUploadInput 
        source="thumbnail_url" 
        label="H√¨nh ·∫£nh thumbnail qu·∫£ng b√° b√†i ƒëƒÉng (N√™n l√† t·ªâ l·ªá 16:9)"
        helperText="T·∫£i l√™n ho·∫∑c ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB"
      />
      
      <RichTextInput 
        source="content" 
        label="N·ªôi dung b√†i ƒëƒÉng"
        multiline
        rows={15}
        fullWidth
      />
      <TextField source="author" label="T√°c gi·∫£ b√†i ƒëƒÉng" />
      <span>Ng√†y t·∫°o: </span><DateField source="created_at" label="Ng√†y t·∫°o" showTime disabled />
      <span>Ng√†y c·∫≠p nh·∫≠t: </span><DateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime disabled />
    </SimpleForm>
  </Edit>
)

// Show component (lo·∫°i b·ªè level, th√™m start_date/end_date, hi·ªÉn th·ªã ·∫£nh)
export const NewsShow = () => (
  <Show title="üëÅÔ∏è Chi ti·∫øt b√†i ƒëƒÉng">
    <SimpleShowLayout>

      {/* Ch·ªçn ID danh m·ª•c tin t·ª©c */}
      <ReferenceField source="category_id" reference="category_news" label="Danh m·ª•c">
        <TextField source="category_id" label="ID Danh m·ª•c" />
      </ReferenceField>

      <TextField source="id" label="ID b√†i ƒëƒÉng" />
      <TextField source="title" label="Ti√™u ƒë·ªÅ b√†i ƒëƒÉng" />
      <TextField source="author" label="T√°c gi·∫£ b√†i ƒëƒÉng" />
      {/* <SelectField 
        source="type" 
        label="Lo·∫°i"
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
      /> */}
      <StatusField />
      <DateField source="time_upload" label="Th·ªùi gian ƒë√£ ƒëƒÉng" showTime />
      <ImageField source="thumbnail_url" label="H√¨nh ·∫£nh" sx={{ '& img': { maxWidth: '300px', borderRadius: '8px' } }} />
      {/* <RichTextField source="content" label="N·ªôi dung" /> */}
      <DateField source="created_at" label="Ng√†y t·∫°o" showTime />
      <DateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime />
    </SimpleShowLayout>
  </Show>
)