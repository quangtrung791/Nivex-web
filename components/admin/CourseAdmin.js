'use client'
import {
  List,
  Datagrid,
  TextField,
  SelectField,
  DateField,
  EditButton,
  DeleteButton,
  ShowButton,
  Create,
  SimpleForm,
  TextInput,
  SelectInput,
  DateTimeInput,
  required,
  Edit,
  Show,
  SimpleShowLayout,
  RichTextField,
  TopToolbar,
  ExportButton,
  CreateButton,
  FilterButton,
  SearchInput,
  useRecordContext,
  ChipField,
  BooleanField,
  BooleanInput,
  ImageField,
  useDelete,
  useNotify,
  useRefresh,
  Button,
  useInput
} from 'react-admin'
import { ImageUploadInput } from './ImageUploadInput'
import { useState } from 'react'
import { convertToVietnamTime } from '@/utils/timezone'

// VietnamDateField component - ƒë∆°n gi·∫£n v√† ch√≠nh x√°c
const VietnamDateField = ({ source, label, showTime = false }) => {
  const record = useRecordContext()
  
  if (!record || !record[source]) {
    return <span>-</span>
  }
  
  const dateValue = record[source]
  
  // Parse th√†nh Date object t·ª´ ISO string
  const date = new Date(dateValue)
  
  if (isNaN(date.getTime())) {
    return <span>-</span>
  }
  
  // Format v·ªõi timezone Vietnam
  const formatted = showTime ? 
    date.toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      day: '2-digit',
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }) : 
    date.toLocaleDateString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  
  return <span title={dateValue}>{formatted}</span>
}

// VietnamDateTimeInput component cho form input - t√≠ch h·ª£p v·ªõi React Admin
const VietnamDateTimeInput = ({ source, label, validate, ...props }) => {
  const { field, fieldState: { error } } = useInput({ source, validate })
  
  // Chuy·ªÉn t·ª´ UTC (database) sang local datetime-local format
  const getLocalDateTime = (utcString) => {
    if (!utcString) return ''
    const utcDate = new Date(utcString)
    // Th√™m 7h ƒë·ªÉ chuy·ªÉn t·ª´ UTC v·ªÅ Vietnam time
    const vietnamDate = new Date(utcDate.getTime() + (7 * 60 * 60 * 1000))
    return vietnamDate.toISOString().slice(0, 16) // Format: YYYY-MM-DDTHH:mm
  }
  
  // Chuy·ªÉn t·ª´ local datetime-local v·ªÅ UTC ƒë·ªÉ l∆∞u database
  const getUTCFromLocal = (localString) => {
    if (!localString) return null
    const localDate = new Date(localString)
    // Tr·ª´ 7h ƒë·ªÉ chuy·ªÉn t·ª´ Vietnam time v·ªÅ UTC
    const utcDate = new Date(localDate.getTime() - (7 * 60 * 60 * 1000))
    return utcDate.toISOString()
  }
  
  const handleChange = (e) => {
    const localValue = e.target.value
    const utcValue = getUTCFromLocal(localValue)
    field.onChange(utcValue)
  }
  
  return (
    <div style={{ marginBottom: '16px' }}>
      <label style={{ display: 'block', marginBottom: '8px', fontSize: '12px', color: 'rgba(0,0,0,0.6)' }}>
        {label} {validate && validate.includes(required) && ' *'}
      </label>
      <input
        type="datetime-local"
        value={getLocalDateTime(field.value)}
        onChange={handleChange}
        style={{
          width: '100%',
          padding: '8px',
          border: error ? '1px solid #f44336' : '1px solid #ccc',
          borderRadius: '4px'
        }}
      />
      {error && (
        <div style={{ color: '#f44336', fontSize: '12px', marginTop: '4px' }}>
          {error.message || error}
        </div>
      )}
    </div>
  )
}

// Custom Delete Button v·ªõi confirmation r√µ r√†ng
const CustomDeleteButton = () => {
  const record = useRecordContext()
  const [deleteOne, { isLoading }] = useDelete()
  const notify = useNotify()
  const refresh = useRefresh()
  
  const handleDelete = () => {
    // S·ª≠ d·ª•ng window.confirm ƒë·ªÉ ƒë·∫£m b·∫£o confirmation ho·∫°t ƒë·ªông
    const isConfirmed = window.confirm(
      `‚ö†Ô∏è X√ÅC NH·∫¨N X√ìA KH√ìA H·ªåC\n\n` +
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc "${record?.title}" kh√¥ng?\n\n` +
      `‚ö†Ô∏è H√ÄNH ƒê·ªòNG N√ÄY KH√îNG TH·ªÇ HO√ÄN T√ÅC!`
    )
    
    if (isConfirmed) {
      deleteOne(
        'courses',
        { id: record.id },
        {
          onSuccess: () => {
            notify('‚úÖ ƒê√£ x√≥a kh√≥a h·ªçc th√†nh c√¥ng', { type: 'success' })
            refresh()
          },
          onError: (error) => {
            notify(`‚ùå L·ªói khi x√≥a: ${error.message}`, { type: 'error' })
          }
        }
      )
    }
  }

  return (
    <Button
      onClick={handleDelete}
      disabled={isLoading}
      color="error"
      size="small"
      sx={{
        '&:hover': {
          backgroundColor: '#d32f2f',
          color: 'white'
        }
      }}
    >
      {isLoading ? 'ƒêang x√≥a...' : 'üóëÔ∏è X√≥a'}
    </Button>
  )
}

// Filters cho t√¨m ki·∫øm (lo·∫°i b·ªè level)
const courseFilters = [
  <SearchInput key="q" source="q" placeholder="T√¨m ki·∫øm kh√≥a h·ªçc..." alwaysOn />,
  <SelectInput key="status" source="status" label="Tr·∫°ng th√°i" choices={[
    { id: 'active', name: 'ƒêang ho·∫°t ƒë·ªông' },
    { id: 'inactive', name: 'Kh√¥ng ho·∫°t ƒë·ªông' },
    { id: 'coming_soon', name: 'S·∫Øp ra m·∫Øt' },
  ]} />,
  <SelectInput key="type" source="type" label="Lo·∫°i" choices={[
    { id: 'online', name: 'Online' },
    { id: 'offline', name: 'Offline' },
    { id: 'hybrid', name: 'Hybrid' },
  ]} />
]

// Custom Actions cho List
const ListActions = () => (
  <TopToolbar>
    <FilterButton />
    <CreateButton label="T·∫°o kh√≥a h·ªçc m·ªõi" />
    <ExportButton />
  </TopToolbar>
)

// Custom Status Field v·ªõi m√†u s·∫Øc
const StatusField = () => {
  const record = useRecordContext()
  if (!record) return null
  
  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#52c41a'
      case 'inactive': return '#f5222d'
      case 'coming_soon': return '#fa8c16'
      default: return '#d9d9d9'
    }
  }
  
  const getStatusLabel = (status) => {
    switch (status) {
      case 'active': return 'ƒêang ho·∫°t ƒë·ªông'
      case 'inactive': return 'Kh√¥ng ho·∫°t ƒë·ªông'
      case 'coming_soon': return 'S·∫Øp ra m·∫Øt'
      default: return status
    }
  }
  
  return (
    <ChipField 
      source="status" 
      style={{ 
        backgroundColor: getStatusColor(record.status),
        color: 'white',
        fontWeight: 'bold'
      }}
      transform={getStatusLabel}
    />
  )
}

// List component (lo·∫°i b·ªè level, th√™m start_date/end_date, hi·ªÉn th·ªã ·∫£nh)
export const CourseList = () => (
  <List 
    filters={courseFilters}
    actions={<ListActions />}
    sort={{ field: 'created_at', order: 'DESC' }}
    perPage={25}
    title="üìö Qu·∫£n l√Ω Kh√≥a h·ªçc"
  >
    <Datagrid 
      rowClick="show"
      bulkActionButtons={false}
    >
      <TextField source="id" label="ID" />
      <ImageField source="image_url" label="·∫¢nh" sx={{ '& img': { maxWidth: '60px', maxHeight: '45px', objectFit: 'cover' } }} />
      <TextField source="title" label="T√™n kh√≥a h·ªçc" />
      <SelectField 
        source="type" 
        label="Lo·∫°i" 
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
      />
      <VietnamDateField source="start_date" label="Ng√†y b·∫Øt ƒë·∫ßu" showTime />
      <VietnamDateField source="end_date" label="Ng√†y k·∫øt th√∫c" showTime />
      <StatusField />
      <EditButton label="S·ª≠a" />
      <ShowButton label="Xem" />
      <CustomDeleteButton />
    </Datagrid>
  </List>
)

// Create component (lo·∫°i b·ªè level, th√™m DateTimeInput)
export const CourseCreate = () => (
  <Create 
    title="‚ûï T·∫°o kh√≥a h·ªçc m·ªõi"
    redirect="list"
  >
    <SimpleForm>
      <TextInput 
        source="title" 
        label="T√™n kh√≥a h·ªçc" 
        validate={[required()]}
        fullWidth
        helperText="Nh·∫≠p t√™n kh√≥a h·ªçc (b·∫Øt bu·ªôc)"
      required />
      
      <SelectInput 
        source="type" 
        label="Lo·∫°i kh√≥a h·ªçc"
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
        defaultValue="online"
        validate={[required()]}
      disabled />
      
      <SelectInput 
        source="status" 
        label="Tr·∫°ng th√°i"
        choices={[
          { id: 'active', name: 'ƒêang ho·∫°t ƒë·ªông' },
          { id: 'inactive', name: 'Kh√¥ng ho·∫°t ƒë·ªông' },
        ]}
        defaultValue="active"
        validate={[required()]}
      />
      
      <VietnamDateTimeInput 
        source="start_date" 
        label="Ng√†y gi·ªù b·∫Øt ƒë·∫ßu"
        validate={[required]}
      />
      
      <VietnamDateTimeInput 
        source="end_date"
        label="Ng√†y gi·ªù k·∫øt th√∫c"
        validate={[required]}
      />
      
      <TextInput 
        source="link_zoom" 
        label="Link Zoom"
        fullWidth
        placeholder="https://zoom.us/j/123456789"
      required />
      
      <ImageUploadInput 
        source="image_url" 
        label="H√¨nh ·∫£nh kh√≥a h·ªçc (N√™n l√† t·ªâ l·ªá 16:9)"
        helperText="T·∫£i l√™n ho·∫∑c ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB. ƒê·ªãnh d·∫°ng: JPG, PNG, GIF, WebP"
      />
      
      <TextInput 
        source="content" 
        label="N·ªôi dung kh√≥a h·ªçc (Ph·∫ßn hi·ªÉn th·ªã m√¥ t·∫£ tr√™n trang KH√ìA H·ªåC)"
        multiline
        rows={5}
        fullWidth
        helperText="M√¥ t·∫£ chi ti·∫øt v·ªÅ kh√≥a h·ªçc"
      />
    </SimpleForm>
  </Create>
)

// Edit component (lo·∫°i b·ªè level, th√™m DateTimeInput)
export const CourseEdit = () => (
  <Edit 
    title="‚úèÔ∏è Ch·ªânh s·ª≠a kh√≥a h·ªçc"
  >
    <SimpleForm>
      <TextInput source="id" label="ID" disabled />
      
      <TextInput 
        source="title" 
        label="T√™n kh√≥a h·ªçc" 
        validate={[required()]}
        fullWidth
      required />
      
      <SelectInput 
        source="type" 
        label="Lo·∫°i kh√≥a h·ªçc"
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
        validate={[required()]}
      disabled />
      
      <SelectInput 
        source="status" 
        label="Tr·∫°ng th√°i"
        choices={[
          { id: 'active', name: 'ƒêang ho·∫°t ƒë·ªông' },
          { id: 'inactive', name: 'Kh√¥ng ho·∫°t ƒë·ªông' },
        ]}
        validate={[required()]}
      />
      
      <VietnamDateTimeInput 
        source="start_date" 
        label="Ng√†y gi·ªù b·∫Øt ƒë·∫ßu"
        validate={[required]}
      />
      
      <VietnamDateTimeInput 
        source="end_date" 
        label="Ng√†y gi·ªù k·∫øt th√∫c"
        validate={[required]}
      />
      
      <TextInput 
        source="link_zoom" 
        label="Link Zoom"
        fullWidth
        placeholder="https://zoom.us/j/123456789"
      required/>
      
      <ImageUploadInput 
        source="image_url" 
        label="H√¨nh ·∫£nh kh√≥a h·ªçc (N√™n l√† t·ªâ l·ªá 16:9)"
        helperText="T·∫£i l√™n ho·∫∑c ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB"
      />
      
      <TextInput 
        source="content" 
        label="N·ªôi dung kh√≥a h·ªçc (Ph·∫ßn hi·ªÉn th·ªã m√¥ t·∫£ tr√™n trang KH√ìA H·ªåC)"
        multiline
        rows={5}
        fullWidth
      />
      
      <span>Ng√†y t·∫°o: </span><VietnamDateField source="created_at" label="Ng√†y t·∫°o" showTime />
      <span>Ng√†y c·∫≠p nh·∫≠t: </span><VietnamDateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime />
    </SimpleForm>
  </Edit>
)

// Show component (lo·∫°i b·ªè level, th√™m start_date/end_date, hi·ªÉn th·ªã ·∫£nh)
export const CourseShow = () => (
  <Show title="üëÅÔ∏è Chi ti·∫øt kh√≥a h·ªçc">
    <SimpleShowLayout>
      <TextField source="id" label="ID" />
      <TextField source="title" label="T√™n kh√≥a h·ªçc" />
      <SelectField 
        source="type" 
        label="Lo·∫°i"
        choices={[
          { id: 'online', name: 'Online' },
          { id: 'offline', name: 'Offline' },
          { id: 'hybrid', name: 'Hybrid' },
        ]}
      />
      <StatusField />
      <VietnamDateField source="start_date" label="Ng√†y gi·ªù b·∫Øt ƒë·∫ßu" showTime />
      <VietnamDateField source="end_date" label="Ng√†y gi·ªù k·∫øt th√∫c" showTime />
      <TextField source="link_zoom" label="Link Zoom" />
      <ImageField source="image_url" label="H√¨nh ·∫£nh" sx={{ '& img': { maxWidth: '300px', borderRadius: '8px' } }} />
      <RichTextField source="content" label="N·ªôi dung" />
      <VietnamDateField source="created_at" label="Ng√†y t·∫°o" showTime />
      <VietnamDateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime />
    </SimpleShowLayout>
  </Show>
)
