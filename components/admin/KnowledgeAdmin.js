// ./components/admin/KnowledgeAdmin.js
'use client'

import {
  List,
  Datagrid,
  TextField,
  DateField,
  EditButton,
  ShowButton,
  DeleteButton,
  Create,
  Edit,
  Show,
  SimpleForm,
  TextInput,
  SelectInput,
  required,
  TopToolbar,
  FilterButton,
  CreateButton,
  ExportButton,
  SearchInput,
  SimpleShowLayout,
  useRecordContext,
} from 'react-admin'
import { Chip } from '@mui/material'
import { ImageUploadInput } from './ImageUploadInput'
import RichTextInput from './RichTextInput'
import { useState } from 'react'

// ===== Custom Delete Button (x√°c nh·∫≠n x√≥a) =====
const CustomDeleteButton = () => {
  const [isDeleting, setIsDeleting] = useState(false)

  return (
    <DeleteButton
      label="X√≥a"
      confirmTitle="X√°c nh·∫≠n x√≥a b√†i vi·∫øt"
      confirmContent="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."
      mutationMode="pessimistic"
      sx={{
        color: '#d32f2f',
        '&:hover': { backgroundColor: 'rgba(211, 47, 47, 0.04)' },
      }}
      onClick={() => {
        const confirmed = window.confirm(
          '‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n c√≥ th·ª±c s·ª± mu·ªën x√≥a b√†i vi·∫øt n√†y?\n\n‚úÖ Click OK ƒë·ªÉ x√°c nh·∫≠n x√≥a\n‚ùå Click Cancel ƒë·ªÉ h·ªßy b·ªè'
        )
        if (confirmed) {
          setIsDeleting(true)
          return true
        }
        return false
      }}
    />
  )
}

// ===== Filters =====
const knowledgeFilters = [
  <SearchInput key="q" source="q" placeholder="T√¨m ki·∫øm b√†i vi·∫øt..." alwaysOn />,
  <SelectInput
    key="status"
    source="status"
    label="Tr·∫°ng th√°i"
    choices={[
      { id: 'active', name: 'ƒêang ho·∫°t ƒë·ªông' },
      { id: 'inactive', name: 'Kh√¥ng ho·∫°t ƒë·ªông' },
    ]}
  />,
  <SelectInput
    key="topic"
    source="topic"
    label="Ch·ªß ƒë·ªÅ"
    choices={[
      { id: 'blockchain', name: 'Blockchain' },
      { id: 'defi', name: 'DeFi' },
      { id: 'copy_trade', name: 'Copy Trade' },
      { id: 'ai', name: 'AI' },
    ]}
  />,
  <SelectInput
    key="difficulty"
    source="difficulty"
    label="ƒê·ªô kh√≥"
    choices={[
      { id: 'easy', name: 'Ng∆∞·ªùi m·ªõi' },
      { id: 'intermediate', name: 'Trung c·∫•p' },
      { id: 'advanced', name: 'N√¢ng cao' },
    ]}
  />,
]

// ===== List actions toolbar =====
const ListActions = () => (
  <TopToolbar>
    <FilterButton />
    <CreateButton label="T·∫°o b√†i vi·∫øt m·ªõi" />
    <ExportButton />
  </TopToolbar>
)

// ===== Custom colored fields using RecordContext =====
const StatusField = () => {
  const record = useRecordContext()
  const status = record?.status
  const color =
    status === 'active' ? '#4caf50' : status === 'inactive' ? '#f44336' : '#9e9e9e'
  const text =
    status === 'active'
      ? 'ƒêang ho·∫°t ƒë·ªông'
      : status === 'inactive'
      ? 'Kh√¥ng ho·∫°t ƒë·ªông'
      : status
  if (!status) return null
  return <Chip label={text} style={{ backgroundColor: color, color: 'white', fontWeight: 'bold' }} />
}

const TopicField = () => {
  const record = useRecordContext()
  const t = record?.topic
  const map = {
    blockchain: { text: 'Blockchain', color: '#2196f3' },
    defi: { text: 'DeFi', color: '#ff9800' },
    copy_trade: { text: 'Copy Trade', color: '#9c27b0' },
    ai: { text: 'AI', color: '#4caf50' },
  }
  if (!t) return null
  const { text, color } = map[t] ?? { text: t, color: '#9e9e9e' }
  return <Chip label={text} style={{ backgroundColor: color, color: 'white', fontWeight: 'bold' }} />
}

const DifficultyField = () => {
  const record = useRecordContext()
  const d = record?.difficulty
  const map = {
    easy: { text: 'Ng∆∞·ªùi m·ªõi', color: '#4caf50' },
    intermediate: { text: 'Trung c·∫•p', color: '#ff9800' },
    advanced: { text: 'N√¢ng cao', color: '#f44336' },
  }
  if (!d) return null
  const { text, color } = map[d] ?? { text: d, color: '#9e9e9e' }
  return <Chip label={text} style={{ backgroundColor: color, color: 'white', fontWeight: 'bold' }} />
}

// ===== List =====
export const KnowledgeList = () => (
  <List
    filters={knowledgeFilters}
    actions={<ListActions />}
    sort={{ field: 'created_at', order: 'DESC' }}
    perPage={25}
    title="üìö Qu·∫£n l√Ω Ki·∫øn th·ª©c"
  >
    <Datagrid rowClick="show" bulkActionButtons={false}>
      <TextField source="id" label="ID" />
      <TextField source="title" label="Ti√™u ƒë·ªÅ" />
      <TopicField label="Ch·ªß ƒë·ªÅ" />
      <DifficultyField label="ƒê·ªô kh√≥" />
      <StatusField label="Tr·∫°ng th√°i" />
      <DateField source="created_at" label="Ng√†y t·∫°o" showTime />
      <EditButton label="S·ª≠a" />
      <ShowButton label="Xem" />
      <CustomDeleteButton />
    </Datagrid>
  </List>
)

// ===== Create =====
export const KnowledgeCreate = () => (
  <Create title="‚ûï T·∫°o b√†i vi·∫øt m·ªõi" redirect="list">
    <SimpleForm>
      <TextInput
        source="title"
        label="Ti√™u ƒë·ªÅ b√†i vi·∫øt"
        validate={[required()]}
        fullWidth
        helperText="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt (b·∫Øt bu·ªôc)"
      />
      <SelectInput
        source="topic"
        label="Ch·ªß ƒë·ªÅ"
        choices={[
          { id: 'blockchain', name: 'Blockchain' },
          { id: 'defi', name: 'DeFi' },
          { id: 'copy_trade', name: 'Copy Trade' },
          { id: 'ai', name: 'AI' },
        ]}
        defaultValue="blockchain"
        validate={[required()]}
      />
      <SelectInput
        source="difficulty"
        label="ƒê·ªô kh√≥"
        choices={[
          { id: 'easy', name: 'Ng∆∞·ªùi m·ªõi' },
          { id: 'intermediate', name: 'Trung c·∫•p' },
          { id: 'advanced', name: 'N√¢ng cao' },
        ]}
        defaultValue="easy"
        validate={[required()]}
      />
      <SelectInput
        source="status"
        label="Tr·∫°ng th√°i"
        choices={[
          { id: 'active', name: 'ƒêang ho·∫°t ƒë·ªông' },
          { id: 'inactive', name: 'Kh√¥ng ho·∫°t ƒë·ªông' },
        ]}
        defaultValue="active"
        validate={[required()]}
      />
      <ImageUploadInput
        source="image_url"
        label="H√¨nh ·∫£nh b√†i vi·∫øt (N√™n l√† t·ªâ l·ªá 16:9)"
        helperText="T·∫£i l√™n ho·∫∑c ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB. ƒê·ªãnh d·∫°ng: JPG, PNG, GIF, WebP"
      />
      <RichTextInput
        source="content"
        label="N·ªôi dung b√†i vi·∫øt"
        fullWidth
        fullHeight
        helperText="N·ªôi dung chi ti·∫øt c·ªßa b√†i vi·∫øt ki·∫øn th·ª©c v·ªõi ƒë·ªãnh d·∫°ng HTML"
        validate={[required()]}
      />
    </SimpleForm>
  </Create>
)

// ===== Edit =====
export const KnowledgeEdit = () => (
  <Edit title="‚úèÔ∏è Ch·ªânh s·ª≠a b√†i vi·∫øt">
    <SimpleForm>
      <TextInput source="id" label="ID" disabled />
      <TextInput source="title" label="Ti√™u ƒë·ªÅ b√†i vi·∫øt" validate={[required()]} fullWidth />
      <SelectInput
        source="topic"
        label="Ch·ªß ƒë·ªÅ"
        choices={[
          { id: 'blockchain', name: 'Blockchain' },
          { id: 'defi', name: 'DeFi' },
          { id: 'copy_trade', name: 'Copy Trade' },
          { id: 'ai', name: 'AI' },
        ]}
        validate={[required()]}
      />
      <SelectInput
        source="difficulty"
        label="ƒê·ªô kh√≥"
        choices={[
          { id: 'easy', name: 'Ng∆∞·ªùi m·ªõi' },
          { id: 'intermediate', name: 'Trung c·∫•p' },
          { id: 'advanced', name: 'N√¢ng cao' },
        ]}
        validate={[required()]}
      />
      <SelectInput
        source="status"
        label="Tr·∫°ng th√°i"
        choices={[
          { id: 'active', name: 'ƒêang ho·∫°t ƒë·ªông' },
          { id: 'inactive', name: 'Kh√¥ng ho·∫°t ƒë·ªông' },
        ]}
        validate={[required()]}
      />
      <ImageUploadInput
        source="image_url"
        label="H√¨nh ·∫£nh b√†i vi·∫øt (N√™n l√† t·ªâ l·ªá 16:9)"
        helperText="T·∫£i l√™n ho·∫∑c ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB"
      />
      <RichTextInput
        source="content"
        label="N·ªôi dung b√†i vi·∫øt"
        fullWidth
        fullHeight
        validate={[required()]}
      />
      <DateField source="created_at" label="Ng√†y t·∫°o" showTime disabled />
      <DateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime disabled />
    </SimpleForm>
  </Edit>
)

// ===== Show =====
export const KnowledgeShow = () => (
  <Show title="üìñ Chi ti·∫øt b√†i vi·∫øt">
    <SimpleShowLayout>
      <TextField source="id" label="ID" />
      <TextField source="title" label="Ti√™u ƒë·ªÅ" />
      <TopicField label="Ch·ªß ƒë·ªÅ" />
      <DifficultyField label="ƒê·ªô kh√≥" />
      <StatusField label="Tr·∫°ng th√°i" />
      <TextField source="content" label="N·ªôi dung" />
      <DateField source="created_at" label="Ng√†y t·∫°o" showTime />
      <DateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime />
    </SimpleShowLayout>
  </Show>
)
