'use client'
import {
  List,
  Datagrid,
  TextField,
  SelectField,
  DateField,
  EditButton,
  DeleteButton,
  ShowButton,
  Create,
  SimpleForm,
  TextInput,
  SelectInput,
  DateTimeInput,
  required,
  Edit,
  Show,
  SimpleShowLayout,
  RichTextField,
  TopToolbar,
  ExportButton,
  CreateButton,
  FilterButton,
  SearchInput,
  useRecordContext,
  ChipField,
  BooleanField,
  BooleanInput,
  ImageField,
  useDelete,
  useNotify,
  useRefresh,
  Button,
  ReferenceInput,
  ReferenceField
} from 'react-admin'
import { ImageUploadInput } from './ImageUploadInput'
import { useState } from 'react'
import RichTextInput from './RichTextInput'

// Custom Delete Button v·ªõi confirmation r√µ r√†ng
const CustomDeleteButton = () => {
  const record = useRecordContext()
  const [deleteOne, { isLoading }] = useDelete()
  const notify = useNotify()
  const refresh = useRefresh()
  
  const handleDelete = () => {
    // S·ª≠ d·ª•ng window.confirm ƒë·ªÉ ƒë·∫£m b·∫£o confirmation ho·∫°t ƒë·ªông
    const isConfirmed = window.confirm(
      `‚ö†Ô∏è X√ÅC NH·∫¨N X√ìA T·ª™ KH√ìA THU·∫¨T NG·ªÆ N√ÄY\n\n` +
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng tin thu·∫≠t ng·ªØ n√†y "${record?.title}" kh√¥ng?\n\n` +
      `‚ö†Ô∏è H√ÄNH ƒê·ªòNG N√ÄY KH√îNG TH·ªÇ HO√ÄN T√ÅC!`
    )
    
    if (isConfirmed) {
      deleteOne(
        'dictionary',
        { id: record.id },
        {
          onSuccess: () => {
            notify('‚úÖ ƒê√£ x√≥a th√†nh c√¥ng', { type: 'success' })
            refresh()
          },
          onError: (error) => {
            notify(`‚ùå L·ªói khi x√≥a: ${error.message}`, { type: 'error' })
          }
        }
      )
    }
  }

  return (
    <Button
      onClick={handleDelete}
      disabled={isLoading}
      color="error"
      size="small"
      sx={{
        '&:hover': {
          backgroundColor: '#d32f2f',
          color: 'white'
        }
      }}
    >
      {isLoading ? 'ƒêang x√≥a...' : 'üóëÔ∏è X√≥a'}
    </Button>
  )
}

// Filters cho t√¨m ki·∫øm (lo·∫°i b·ªè level)
const dictionaryFilters = [
  <SearchInput key="q" source="q" placeholder="T√¨m ki·∫øm t·ª´ kh√≥a thu·∫≠t ng·ªØ hi·ªán c√≥..." alwaysOn />,
]

// Custom Actions cho List
const ListActions = () => (
  <TopToolbar>
    <FilterButton />
    <CreateButton label="T·∫°o thu·∫≠t ng·ªØ m·ªõi" />
    <ExportButton />
  </TopToolbar>
)

// Custom Status Field v·ªõi m√†u s·∫Øc
const StatusField = () => {
  const record = useRecordContext()
  if (!record) return null
 
  return (
    <ChipField 
      source="status" 
      style={{ 
        color: 'white',
        fontWeight: 'bold'
      }}
    //   transform={getStatusLabel}
    />
  )
}

// List component (lo·∫°i b·ªè level, th√™m start_date/end_date, hi·ªÉn th·ªã ·∫£nh)
export const DictionaryList = () => (
  <List 
    filters={dictionaryFilters}
    actions={<ListActions />}
    sort={{ field: 'created_at', order: 'DESC' }}
    perPage={25}
    title="üìö C·∫≠p nh·∫≠t d·ªØ li·ªáu thu·∫≠t ng·ªØ"
  >
    <Datagrid 
      rowClick="show"
      bulkActionButtons={false}
    >

      <TextField source="id" label="ID" />
      {/* <ImageField source="thumbnail_url" label="·∫¢nh" sx={{ '& img': { maxWidth: '60px', maxHeight: '45px', objectFit: 'cover' } }} /> */}
      <TextField source="keyword" label="T·ª´ kh√≥a thu·∫≠t ng·ªØ" />
      <TextField source="short_desc" label="M√¥ t·∫£ ng·∫Øn v·ªÅ t·ª´ kh√≥a" />
      <StatusField />
      <EditButton label="S·ª≠a" />
      <ShowButton label="Xem" />
      <CustomDeleteButton />
    </Datagrid>
  </List>
)

// Create component (lo·∫°i b·ªè level, th√™m DateTimeInput)
export const DictionaryCreate = () => (
  <Create 
    title="‚ûï T·∫°o t·ª´ kh√≥a thu·∫≠t ng·ªØ m·ªõi"
    redirect="list"
  >
    <SimpleForm>

      <TextInput 
        source="keyword" 
        label="T·ª´ kh√≥a thu·∫≠t ng·ªØ" 
        validate={[required()]}
        fullWidth
        helperText="Nh·∫≠p T·ª´ kh√≥a thu·∫≠t ng·ªØ (b·∫Øt bu·ªôc)"
      required />

      <TextInput 
        source="short_desc" 
        label="M√¥ t·∫£ ng·∫Øn v·ªÅ t·ª´ kh√≥a" 
        validate={[required()]}
        fullWidth
        helperText="Nh·∫≠p M√¥ t·∫£ ng·∫Øn v·ªÅ t·ª´ kh√≥a (b·∫Øt bu·ªôc)"
      required />
      
      <RichTextInput 
        source="description" 
        label="Gi·∫£i th√≠ch t·ª´ kh√≥a thu·∫≠t ng·ªØ"
        multiline
        rows={15}
        fullWidth
        helperText="Gi·∫£i th√≠ch t·ª´ kh√≥a thu·∫≠t ng·ªØ"
      />
    </SimpleForm>
  </Create>
)

// Edit component (lo·∫°i b·ªè level, th√™m DateTimeInput)
export const DictionaryEdit = () => (
  <Edit 
    title="‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin thu·∫≠t ng·ªØ"
  >
    <SimpleForm>
      <TextInput source="id" label="ID" disabled />
      <TextInput 
        source="keyword" 
        label="T·ª´ kh√≥a thu·∫≠t ng·ªØ" 
        validate={[required()]}
        fullWidth
      required />

      <TextInput 
        source="short_desc" 
        label="M√¥ t·∫£ ng·∫Øn v·ªÅ t·ª´ kh√≥a" 
        validate={[required()]}
        fullWidth
      required />
      
      <RichTextInput 
        source="description" 
        label="Gi·∫£i th√≠ch t·ª´ kh√≥a thu·∫≠t ng·ªØ"
        multiline
        rows={15}
        fullWidth
      />
      <span>Ng√†y t·∫°o: </span><DateField source="created_at" label="Ng√†y t·∫°o" showTime disabled />
      <span>Ng√†y c·∫≠p nh·∫≠t: </span><DateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime disabled />
    </SimpleForm>
  </Edit>
)

// Show component (lo·∫°i b·ªè level, th√™m start_date/end_date, hi·ªÉn th·ªã ·∫£nh)
export const DictionaryShow = () => (
  <Show title="üëÅÔ∏è Chi ti·∫øt / th√¥ng tin thu·∫≠t ng·ªØ">
    <SimpleShowLayout>
      <TextField source="id" label="ID" />
      <TextField source="keyword" label="T·ª´ kh√≥a thu·∫≠t ng·ªØ" />
      <TextField source="short_desc" label="M√¥ t·∫£ ng·∫Øn v·ªÅ t·ª´ kh√≥a" />
      <StatusField />
      {/* <RichTextField source="description" label="Gi·∫£i th√≠ch t·ª´ kh√≥a thu·∫≠t ng·ªØ" /> */}
      <DateField source="created_at" label="Ng√†y t·∫°o" showTime />
      <DateField source="updated_at" label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi" showTime />
    </SimpleShowLayout>
  </Show>
)